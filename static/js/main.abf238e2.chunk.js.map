{"version":3,"sources":["AppStyle.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","cardStyle","maxWidth","display","justifyContent","inputStyle","margin","textAlign","titleStyle","backgroundColor","height","alignItems","fontWeight","fontFamily","flexDirection","cellStyle","users","App","useState","search","setSearch","searchResults","setSearchResults","useEffect","results","filter","person","toLowerCase","includes","classes","AlertTitle","className","Input","type","placeholder","autoComplete","onChange","e","target","value","toLocaleLowerCase","Card","Table","map","item","TableRow","TableCell","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAgCmBA,EA7BDC,aAAW,SAACC,GAAD,MAAY,CACnCC,UAAW,CACLC,SAAU,IACVC,QAAQ,WACRC,eAAe,UAEjBC,WAAW,CACTC,OAAQ,SACRC,UAAU,UAEZC,WAAW,CACTC,gBAAgB,SAChBC,OAAQ,QACRP,QAAS,OACTC,eAAgB,SAChBG,UAAW,SACXI,WAAW,SACXC,WAAW,SACXC,WAAY,0BACZC,cAAc,UAEhBC,UAAW,CACHZ,QAAQ,OACRC,eAAe,SACfQ,WAAW,c,gCClBvBI,EAAQ,CACZ,MACA,OACA,SACA,QACA,WACA,QACA,UACA,QACA,YACA,MACA,SA2DaC,EAxDH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,OAE0BF,mBAAS,IAFnC,mBAETG,EAFS,KAEMC,EAFN,KAIhBC,qBAAU,WACR,IAAMC,EAAUR,EAAMS,QAAO,SAACC,GAAD,OAC3BA,EAAOC,cAAcC,SAAST,MAEhCG,EAAiBE,KAChB,CAACL,IACJ,IAAMU,EAAU/B,IAChB,OAGE,oCACE,kBAACgC,EAAA,EAAD,CACEC,UAAWF,EAAQrB,YAEnB,kBAAC,IAAD,MAHF,gBAMA,kBAACwB,EAAA,EAAD,CACIC,KAAK,OACLC,YAAY,qBACZC,aAAa,MACbJ,UAAWF,EAAQxB,WACnB+B,SAAU,SAACC,GAAD,OAAOjB,EAAUiB,EAAEC,OAAOC,MAAMC,sBAC1CD,MAAOpB,KAKX,kBAACsB,EAAA,EAAD,CACEV,UAAWF,EAAQ5B,WAEnB,kBAACyC,EAAA,EAAD,KACGrB,EAAcsB,KAAI,SAACC,GAAD,OACjB,kBAACC,EAAA,EAAD,KAGE,kBAACC,EAAA,EAAD,CACEf,UAAWF,EAAQd,WAElB6B,WCtDGG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.abf238e2.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n      cardStyle: {\n            maxWidth: 650,\n            display:\"contents\",\n            justifyContent:\"center\",\n          },\n          inputStyle:{\n            margin: \"0 auto\",\n            textAlign:\"center\"\n          },\n          titleStyle:{\n            backgroundColor:\"orange\",\n            height: \"100px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            textAlign: \"center\",\n            alignItems:\"center\",\n            fontWeight:\"bolder\",\n            fontFamily: \"'Open Sans', sans-serif\",\n            flexDirection:\"column\",\n          },\n          cellStyle: {\n                  display:\"flex\",\n                  justifyContent:\"center\",\n                  fontWeight:\"bolder\",\n          }\n    }));\n    \n\n    export default useStyles;","import React, { useState, useEffect } from \"react\";\nimport { AlertTitle } from '@material-ui/lab';\nimport Input from '@material-ui/core/Input';\nimport { FiUsers } from 'react-icons/fi';\nimport useStyles from \"./AppStyle\";\nimport Table from '@material-ui/core/Table';\nimport Card from '@material-ui/core/Card';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nconst users = [\n  \"Cia\",\n  \"Alex\",\n  \"Shahin\",\n  \"Ayham\",\n  \"Tomislav\",\n  \"Kadir\",\n  \"Vardges\",\n  \"Maxim\",\n  \"Sebastian\",\n  \"Bea\",\n  \"Sofia\",\n];\n\nconst App = () => {\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n\n  useEffect(() => {\n    const results = users.filter((person) =>\n      person.toLowerCase().includes(search)\n    );\n    setSearchResults(results);\n  }, [search]);\n  const classes = useStyles()\n  return (\n\n\n    <>\n      <AlertTitle\n        className={classes.titleStyle}\n      >\n        <FiUsers />\n        &nbsp;\n        Benutzer\n      <Input\n          type=\"text\"\n          placeholder=\"Benutzer Suchen...\"\n          autoComplete=\"off\"\n          className={classes.inputStyle}\n          onChange={(e) => setSearch(e.target.value.toLocaleLowerCase())}\n          value={search}\n        />\n      </AlertTitle>\n\n\n      <Card\n        className={classes.cardStyle}\n      >\n        <Table>\n          {searchResults.map((item) => (\n            <TableRow\n\n            >\n              <TableCell\n                className={classes.cellStyle}\n              >\n                {item}\n              </TableCell>\n            </TableRow>\n          ))}\n\n\n        </Table>\n      </Card>\n\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}